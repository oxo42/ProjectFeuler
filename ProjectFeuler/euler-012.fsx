(*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*)

let triangleNumbers = 
    {2L..(System.Int64.MaxValue)}
    |> Seq.scan (+) 1L

let findFactorsOf (n : int64) =
    let upperBound = int64(System.Math.Sqrt(double(n))) 
    [1L..upperBound] 
    |> List.filter (fun x -> n % x = 0L)
    |> List.collect (fun x -> [x; n/x])
   

triangleNumbers
|> Seq.filter (fun x -> findFactorsOf x |> List.length > 500)
// |> Seq.skipWhile (fun (num,count) -> count<5)
|> Seq.head
|> printfn "%A"